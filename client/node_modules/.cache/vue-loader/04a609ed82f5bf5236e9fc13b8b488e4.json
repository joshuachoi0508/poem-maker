{"remainingRequest":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/src/components/PoemComponent.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/src/components/PoemComponent.vue","mtime":1559877829118},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport PoemService from '../PoemService'\n\n\nexport default {\n  name: 'PoemComponent',\n  data() {\n    return {\n      poems: [],\n      editPoemId: \"\",\n      editNouns: [],\n      editAdjectives: [],\n      editAdverbs: [],\n      editPrepositions: [],\n      editVerbs: [],\n      error: '',\n      errors: [],\n      text: '',\n      nouns: [],\n      adjectives: [],\n      adverbs: [],\n      prepositions: [],\n      verbs: []\n    }\n  },\n  async created() {\n    try {\n      this.poems = await PoemService.getPoems();\n    } catch(err) {\n      this.error = err.message;\n    }\n  },\n  methods: {\n    async createPoem() {\n      await PoemService.insertPoem(this.text);\n      this.poems = await PoemService.getPoems();\n    },\n    async deletePoem(id) {\n      await PoemService.deletePoem(id);\n      this.poems = await PoemService.getPoems();\n    },\n    handleSubmit(e){\n      e.preventDefault;\n      this.errors = [];\n\n      if (this.checkLength() && this.checkChars()) {\n        const firstFirstWord = this.prepositions[1][0].toUpperCase() + this.prepositions[1].slice(1).toLowerCase();\n        const secondFirstWord = this.prepositions[2][0].toUpperCase() + this.prepositions[2].slice(1).toLowerCase();\n        const thirdFirstWord = this.prepositions[0][0].toUpperCase() + this.prepositions[0].slice(1).toLowerCase();\n        const title = this.nouns[2][0].toUpperCase() + this.nouns[2].slice(1);\n\n        this.text = `${title}.`\n        + `${firstFirstWord} ${this.adjectives[0].toLowerCase()} ${this.nouns[2].toLowerCase()} ${this.adverbs[2].toLowerCase()} ${this.verbs[1]}.`\n        + `${secondFirstWord} ${this.adjectives[2].toLowerCase()} ${this.nouns[0].toLowerCase()} ${this.adverbs[1].toLowerCase()} ${this.verbs[2].toLowerCase()}.`\n        + `${thirdFirstWord} ${this.adjectives[1].toLowerCase()} ${this.nouns[1].toLowerCase()} ${this.adverbs[0].toLowerCase()} ${this.verbs[0].toLowerCase()}.`;\n\n        this.createPoem();\n      }\n    },\n    checkLength() {\n      if (!(this.nouns.length === 3 && this.adjectives.length === 3 &&\n      this.adverbs.length === 3 && this.prepositions.length === 3 &&\n      this.verbs.length === 3\n      )) {\n        this.errors.push('Insert all fields');\n        return false;\n      }\n\n      return true;\n    },\n    checkChars() {\n      const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\n      for(let i = 0; i < this.nouns.length; i++) {\n        const noun = this.nouns[i];\n        if (noun === undefined) return false;\n\n        for(let j = 0; j < noun.length; j++) {\n          if (!alphabet.includes(noun[j])) {\n            this.errors.push('Only insert English characters without any space');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.adjectives.length; i++) {\n        const adjective = this.adjectives[i];\n        if (adjective === undefined) return false;\n\n        for(let j = 0; j < adjective.length; j++) {\n          if (!alphabet.includes(adjective[j])) {\n            this.errors.push('Insert only English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.adverbs.length; i++) {\n        const adverb = this.adverbs[i];\n        if (adverb === undefined) return false;\n\n        for(let j = 0; j < adverb.length; j++) {\n          if (!alphabet.includes(adverb[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.prepositions.length; i++) {\n        const preposition = this.prepositions[i];\n        if (preposition === undefined) return false;\n\n        for(let j = 0; j < preposition.length; j++) {\n          if (!alphabet.includes(preposition[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.verbs.length; i++) {\n        const verb = this.verbs[i];\n        if (verb === undefined) return false;\n\n        for(let j = 0; j < verb.length; j++) {\n          if (!alphabet.includes(verb[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    organizePoem(poem){\n      const poemArray = poem.text.split('.');\n\n      return `\n      <p data-v-25a0ba54 class=\"text\">\n        ${poemArray[0]}\n        </br>\n        </br>\n        ${poemArray[1]}\n        </br>\n        ${poemArray[2]}\n        </br>\n        ${poemArray[3]}\n      </p>\n      `;\n    },\n    renderEditForm(id, text) {\n      if (this.editPoemId === id) {\n        this.editPoemId = \"\";\n        this.editNouns = [];\n        this.editAdjectives = [];\n        this.editAdverbs = [];\n        this.editPrepositions = [];\n        this.editVerbs = [];\n      } else {\n        this.editPoemId = id;\n        this.updateEditWords(text);\n      }\n    },\n    updateEditWords(text){\n      const sentences = text.split(\".\");\n      const words = sentences.slice(1).join(\" \").split(\" \");\n\n      this.editNouns = [];\n      this.editAdjectives = [];\n      this.editAdverbs = [];\n      this.editPrepositions = [];\n      this.editVerbs = [];\n\n      this.editNouns.push(words[2], words[7], words[13]);\n      this.editAdjectives.push(words[1], words[6], words[12]);\n      this.editAdverbs.push(words[3], words[8], words[1]);\n      this.editPrepositions.push(words[0], words[5], words[1]);\n      this.editVerbs.push(words[4], words[10], words[15]);\n\n      debugger;\n    }\n\n    // \"Against bright foot seductively \n    // Swim In large ear plug slowly catch After limited phone quietly lie \"\n\n    //\n  }\n}\n",{"version":3,"sources":["PoemComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4JA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA","file":"PoemComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <h1 class=\"title\">Poem Board</h1>\n    <div class=\"create-poem\">\n      <form \n        class=\"create-poem-form\"\n        @submit.prevent=\"handleSubmit\"\n      >\n        <div class=\"user-inputs\">\n          <label class=\"user-input-label\">\n            Nouns\n            <input type=\"text\" class=\"user-input\" v-model=\"nouns[0]\" placeholder=\"insert a noun\">\n            <input type=\"text\" class=\"user-input\" v-model=\"nouns[1]\" placeholder=\"insert a noun\">\n            <input type=\"text\" class=\"user-input\" v-model=\"nouns[2]\" placeholder=\"insert a noun\">\n          </label>\n\n          <label class=\"user-input-label\">\n            Adjectives\n            <input type=\"text\" class=\"user-input\" v-model=\"adjectives[0]\" placeholder=\"insert a adjective\">\n            <input type=\"text\" class=\"user-input\" v-model=\"adjectives[1]\" placeholder=\"insert a adjective\">\n            <input type=\"text\" class=\"user-input\" v-model=\"adjectives[2]\" placeholder=\"insert a adjective\">\n          </label>\n\n          <label class=\"user-input-label\">\n            Adverbs\n            <input type=\"text\" class=\"user-input\" v-model=\"adverbs[0]\" placeholder=\"insert a adverb\">\n            <input type=\"text\" class=\"user-input\" v-model=\"adverbs[1]\" placeholder=\"insert a adverb\">\n            <input type=\"text\" class=\"user-input\" v-model=\"adverbs[2]\" placeholder=\"insert a adverb\">\n          </label>\n\n          <label class=\"user-input-label\">\n            Prepositions\n            <input type=\"text\" class=\"user-input\" v-model=\"prepositions[0]\" placeholder=\"insert a preposition\">\n            <input type=\"text\" class=\"user-input\" v-model=\"prepositions[1]\" placeholder=\"insert a preposition\">\n            <input type=\"text\" class=\"user-input\" v-model=\"prepositions[2]\" placeholder=\"insert a preposition\">\n          </label>\n\n          <label class=\"user-input-label\">\n            Verbs\n            <input type=\"text\" class=\"user-input\" v-model=\"verbs[0]\" placeholder=\"insert a verb\">\n            <input type=\"text\" class=\"user-input\" v-model=\"verbs[1]\" placeholder=\"insert a verb\">\n            <input type=\"text\" class=\"user-input\" v-model=\"verbs[2]\" placeholder=\"insert a verb\">\n          </label>\n        </div>\n\n        <p v-if=\"errors.length\">\n          <ul class=\"error-list\">\n            <li class=\"error\"\n              v-for=\"error in errors\"\n              v-bind:item=\"error\"\n              v-bind:key=\"error\"\n            >{{ error }}</li>\n          </ul>\n        </p>\n\n        <button class=\"submit-button\" type=\"submit\">Submit</button>\n      </form>\n\n    </div>\n\n    <div class=\"poems-container\">\n\n      <div class=\"poem\"\n        v-for=\"(poem, index) in poems\"\n        v-bind:item=\"poem\"\n        v-bind:index=\"index\"\n        v-bind:key=\"poem._id\"\n      >\n        <div class=\"date-and-delete\">\n          <p>\n            {{ poem.createdAt.getDate() }}/{{ poem.createdAt.getMonth() }}/{{ poem.createdAt.getFullYear()}}\n          </p>\n          <div class=\"edit-and-delete\">\n            <p\n              class=\"edit-button\"\n              v-on:click=\"renderEditForm(poem._id, poem.text)\"\n            >Edit</p>\n            <p\n              class=\"delete-button\"\n              v-on:click=\"deletePoem(poem._id)\"\n            >\n              X\n            </p>\n          </div>\n        </div>\n\n          <div \n            v-if=\"!(editPoemId === poem._id)\"\n            v-html=\"organizePoem(poem)\"\n          >\n          </div>\n\n          <div v-if=\"editPoemId === poem._id\">\n            <form \n              class=\"create-poem-form\"\n              @submit.prevent=\"handleSubmit\"\n            >\n              <div class=\"user-inputs\">\n                <label class=\"user-input-label\">\n                  Nouns\n                  <input type=\"text\" class=\"user-input\" v-model=\"editNouns[0]\" placeholder=\"insert a noun\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editNouns[1]\" placeholder=\"insert a noun\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editNouns[2]\" placeholder=\"insert a noun\">\n                </label>\n\n                <label class=\"user-input-label\">\n                  Adjectives\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdjectives[0]\" placeholder=\"insert a adjective\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdjectives[1]\" placeholder=\"insert a adjective\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdjectives[2]\" placeholder=\"insert a adjective\">\n                </label>\n\n                <label class=\"user-input-label\">\n                  Adverbs\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdverbs[0]\" placeholder=\"insert a adverb\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdverbs[1]\" placeholder=\"insert a adverb\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editAdverbs[2]\" placeholder=\"insert a adverb\">\n                </label>\n\n                <label class=\"user-input-label\">\n                  Prepositions\n                  <input type=\"text\" class=\"user-input\" v-model=\"editPrepositions[0]\" placeholder=\"insert a preposition\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editPrepositions[1]\" placeholder=\"insert a preposition\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editPrepositions[2]\" placeholder=\"insert a preposition\">\n                </label>\n\n                <label class=\"user-input-label\">\n                  Verbs\n                  <input type=\"text\" class=\"user-input\" v-model=\"editVerbs[0]\" placeholder=\"insert a verb\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editVerbs[1]\" placeholder=\"insert a verb\">\n                  <input type=\"text\" class=\"user-input\" v-model=\"editVerbs[2]\" placeholder=\"insert a verb\">\n                </label>\n              </div>\n\n              <p v-if=\"errors.length\">\n                <ul class=\"error-list\">\n                  <li class=\"error\"\n                    v-for=\"error in errors\"\n                    v-bind:item=\"error\"\n                    v-bind:key=\"error\"\n                  >{{ error }}</li>\n                </ul>\n              </p>\n\n              <button class=\"submit-button\" type=\"submit\">Submit</button>\n            </form>\n          </div>\n\n      </div>\n\n    </div>\n\n  </div>\n</template>\n\n<script>\nimport PoemService from '../PoemService'\n\n\nexport default {\n  name: 'PoemComponent',\n  data() {\n    return {\n      poems: [],\n      editPoemId: \"\",\n      editNouns: [],\n      editAdjectives: [],\n      editAdverbs: [],\n      editPrepositions: [],\n      editVerbs: [],\n      error: '',\n      errors: [],\n      text: '',\n      nouns: [],\n      adjectives: [],\n      adverbs: [],\n      prepositions: [],\n      verbs: []\n    }\n  },\n  async created() {\n    try {\n      this.poems = await PoemService.getPoems();\n    } catch(err) {\n      this.error = err.message;\n    }\n  },\n  methods: {\n    async createPoem() {\n      await PoemService.insertPoem(this.text);\n      this.poems = await PoemService.getPoems();\n    },\n    async deletePoem(id) {\n      await PoemService.deletePoem(id);\n      this.poems = await PoemService.getPoems();\n    },\n    handleSubmit(e){\n      e.preventDefault;\n      this.errors = [];\n\n      if (this.checkLength() && this.checkChars()) {\n        const firstFirstWord = this.prepositions[1][0].toUpperCase() + this.prepositions[1].slice(1).toLowerCase();\n        const secondFirstWord = this.prepositions[2][0].toUpperCase() + this.prepositions[2].slice(1).toLowerCase();\n        const thirdFirstWord = this.prepositions[0][0].toUpperCase() + this.prepositions[0].slice(1).toLowerCase();\n        const title = this.nouns[2][0].toUpperCase() + this.nouns[2].slice(1);\n\n        this.text = `${title}.`\n        + `${firstFirstWord} ${this.adjectives[0].toLowerCase()} ${this.nouns[2].toLowerCase()} ${this.adverbs[2].toLowerCase()} ${this.verbs[1]}.`\n        + `${secondFirstWord} ${this.adjectives[2].toLowerCase()} ${this.nouns[0].toLowerCase()} ${this.adverbs[1].toLowerCase()} ${this.verbs[2].toLowerCase()}.`\n        + `${thirdFirstWord} ${this.adjectives[1].toLowerCase()} ${this.nouns[1].toLowerCase()} ${this.adverbs[0].toLowerCase()} ${this.verbs[0].toLowerCase()}.`;\n\n        this.createPoem();\n      }\n    },\n    checkLength() {\n      if (!(this.nouns.length === 3 && this.adjectives.length === 3 &&\n      this.adverbs.length === 3 && this.prepositions.length === 3 &&\n      this.verbs.length === 3\n      )) {\n        this.errors.push('Insert all fields');\n        return false;\n      }\n\n      return true;\n    },\n    checkChars() {\n      const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\n      for(let i = 0; i < this.nouns.length; i++) {\n        const noun = this.nouns[i];\n        if (noun === undefined) return false;\n\n        for(let j = 0; j < noun.length; j++) {\n          if (!alphabet.includes(noun[j])) {\n            this.errors.push('Only insert English characters without any space');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.adjectives.length; i++) {\n        const adjective = this.adjectives[i];\n        if (adjective === undefined) return false;\n\n        for(let j = 0; j < adjective.length; j++) {\n          if (!alphabet.includes(adjective[j])) {\n            this.errors.push('Insert only English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.adverbs.length; i++) {\n        const adverb = this.adverbs[i];\n        if (adverb === undefined) return false;\n\n        for(let j = 0; j < adverb.length; j++) {\n          if (!alphabet.includes(adverb[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.prepositions.length; i++) {\n        const preposition = this.prepositions[i];\n        if (preposition === undefined) return false;\n\n        for(let j = 0; j < preposition.length; j++) {\n          if (!alphabet.includes(preposition[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      for(let i = 0; i < this.verbs.length; i++) {\n        const verb = this.verbs[i];\n        if (verb === undefined) return false;\n\n        for(let j = 0; j < verb.length; j++) {\n          if (!alphabet.includes(verb[j])) {\n            this.errors.push('Only insert English characters');\n            return false;\n          }\n        }\n      }\n\n      return true;\n    },\n    organizePoem(poem){\n      const poemArray = poem.text.split('.');\n\n      return `\n      <p data-v-25a0ba54 class=\"text\">\n        ${poemArray[0]}\n        </br>\n        </br>\n        ${poemArray[1]}\n        </br>\n        ${poemArray[2]}\n        </br>\n        ${poemArray[3]}\n      </p>\n      `;\n    },\n    renderEditForm(id, text) {\n      if (this.editPoemId === id) {\n        this.editPoemId = \"\";\n        this.editNouns = [];\n        this.editAdjectives = [];\n        this.editAdverbs = [];\n        this.editPrepositions = [];\n        this.editVerbs = [];\n      } else {\n        this.editPoemId = id;\n        this.updateEditWords(text);\n      }\n    },\n    updateEditWords(text){\n      const sentences = text.split(\".\");\n      const words = sentences.slice(1).join(\" \").split(\" \");\n\n      this.editNouns = [];\n      this.editAdjectives = [];\n      this.editAdverbs = [];\n      this.editPrepositions = [];\n      this.editVerbs = [];\n\n      this.editNouns.push(words[2], words[7], words[13]);\n      this.editAdjectives.push(words[1], words[6], words[12]);\n      this.editAdverbs.push(words[3], words[8], words[1]);\n      this.editPrepositions.push(words[0], words[5], words[1]);\n      this.editVerbs.push(words[4], words[10], words[15]);\n\n      debugger;\n    }\n\n    // \"Against bright foot seductively \n    // Swim In large ear plug slowly catch After limited phone quietly lie \"\n\n    //\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n@import \"reset.scss\";\n@import \"main.css\";\n</style>\n"]}]}