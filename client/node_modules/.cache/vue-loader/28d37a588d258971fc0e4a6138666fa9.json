{"remainingRequest":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/src/components/PoemComponent.vue?vue&type=style&index=0&id=5712e9de&scoped=true&lang=css&","dependencies":[{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/src/components/PoemComponent.vue","mtime":1560138069069},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/JoshC/Desktop/Applications/GSVlabs/poem_maker/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n@import \"reset.scss\";\n@import \"main.css\";\n",{"version":3,"sources":["PoemComponent.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgWA;AACA","file":"PoemComponent.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div class=\"container\">\n    <h1 class=\"title\">Poem Board</h1>\n      <CreatePoemComponent \n        v-bind:handleSubmit=\"handleSubmit\"\n        v-bind:errors=\"errors\"\n        v-bind:nouns=\"nouns\"\n        v-bind:adjectives=\"adjectives\"\n        v-bind:adverbs=\"adverbs\"\n        v-bind:prepositions=\"prepositions\"\n        v-bind:verbs=\"verbs\"\n      />\n\n      <SinglePoemComponent \n        v-bind:handleSubmit=\"handleSubmit\"\n        v-bind:editErrors=\"editErrors\"\n        v-bind:editNouns=\"editNouns\"\n        v-bind:editAdjectives=\"editAdjectives\"\n        v-bind:editAdverbs=\"editAdverbs\"\n        v-bind:editPrepositions=\"editPrepositions\"\n        v-bind:editVerbs=\"editVerbs\"\n        v-bind:editPoemId=\"editPoemId\"\n        v-bind:poems=\"poems\"\n        v-bind:renderEditForm=\"renderEditForm\"\n        v-bind:organizePoem=\"organizePoem\"\n      />\n      \n  </div>\n</template>\n\n<script>\nimport PoemService from '../PoemService'\nimport CreatePoemComponent from './CreatePoemComponent';\nimport SinglePoemComponent from './SinglePoemComponent';\n\nexport default {\n  name: 'PoemComponent',\n  data() {\n    return {\n      poems: [],\n      editPoemId: \"\",\n      editNouns: [],\n      editAdjectives: [],\n      editAdverbs: [],\n      editPrepositions: [],\n      editVerbs: [],\n      error: '',\n      errors: [],\n      editErrors: [],\n      text: '',\n      nouns: [],\n      adjectives: [],\n      adverbs: [],\n      prepositions: [],\n      verbs: []\n    }\n  },\n  components: {\n    CreatePoemComponent,\n    SinglePoemComponent\n  },\n  async created() {\n    try {\n      this.poems = await PoemService.getPoems();\n    } catch(err) {\n      this.error = err.message;\n    }\n  },\n  methods: {\n    async createPoem() {\n      await PoemService.insertPoem(this.text);\n      this.poems = await PoemService.getPoems();\n    },\n    async editPoem(id) {\n      await PoemService.editPoem(id, this.text);\n      this.poems = await PoemService.getPoems();\n    },\n    handleSubmit(type, id) {\n      this.errors = [];\n      this.editErrors = [];\n\n      if (type === \"POST\" && this.checkLength(\"POST\") && this.checkChars(\"POST\")) {\n        const firstFirstWord = this.prepositions[1][0].toUpperCase() + this.prepositions[1].slice(1).toLowerCase();\n        const secondFirstWord = this.prepositions[2][0].toUpperCase() + this.prepositions[2].slice(1).toLowerCase();\n        const thirdFirstWord = this.prepositions[0][0].toUpperCase() + this.prepositions[0].slice(1).toLowerCase();\n        const title = this.nouns[2][0].toUpperCase() + this.nouns[2].slice(1);\n\n        this.text = `${title}.`\n        + `${firstFirstWord} ${this.adjectives[0].toLowerCase()} ${this.nouns[2].toLowerCase()} ${this.adverbs[2].toLowerCase()} ${this.verbs[1].toLowerCase()}.`\n        + `${secondFirstWord} ${this.adjectives[2].toLowerCase()} ${this.nouns[0].toLowerCase()} ${this.adverbs[1].toLowerCase()} ${this.verbs[2].toLowerCase()}.`\n        + `${thirdFirstWord} ${this.adjectives[1].toLowerCase()} ${this.nouns[1].toLowerCase()} ${this.adverbs[0].toLowerCase()} ${this.verbs[0].toLowerCase()}.`;\n\n        this.nouns = [];\n        this.adjectives = [];\n        this.adverbs = [];\n        this.prepositions = [];\n        this.verbs = [];\n\n        this.createPoem();\n      }\n\n      if (type === 'PUT' && this.checkLength(\"PUT\") && this.checkChars(\"PUT\")) {\n        const firstFirstWord = this.editPrepositions[0][0].toUpperCase() + this.editPrepositions[0].slice(1).toLowerCase();\n        const secondFirstWord = this.editPrepositions[1][0].toUpperCase() + this.editPrepositions[1].slice(1).toLowerCase();\n        const thirdFirstWord = this.editPrepositions[2][0].toUpperCase() + this.editPrepositions[2].slice(1).toLowerCase();\n        const title = this.editNouns[0][0].toUpperCase() + this.editNouns[0].slice(1);\n\n        this.text = `${title}.`\n        + `${firstFirstWord} ${this.editAdjectives[0].toLowerCase()} ${this.editNouns[0].toLowerCase()} ${this.editAdverbs[0].toLowerCase()} ${this.editVerbs[0].toLowerCase()}.`\n        + `${secondFirstWord} ${this.editAdjectives[1].toLowerCase()} ${this.editNouns[1].toLowerCase()} ${this.editAdverbs[1].toLowerCase()} ${this.editVerbs[1].toLowerCase()}.`\n        + `${thirdFirstWord} ${this.editAdjectives[2].toLowerCase()} ${this.editNouns[2].toLowerCase()} ${this.editAdverbs[2].toLowerCase()} ${this.editVerbs[2].toLowerCase()}.`;\n  \n        this.editNouns = [];\n        this.editAdjectives = [];\n        this.editAdverbs = [];\n        this.editPrepositions = [];\n        this.editVerbs = [];\n        this.editPoemId = \"\";\n        this.editPoem(id);\n      }\n    },\n    checkLength(type) {\n      if (type === \"POST\" && !(this.nouns.length === 3 && this.adjectives.length === 3 &&\n      this.adverbs.length === 3 && this.prepositions.length === 3 &&\n      this.verbs.length === 3)) {\n        this.errors.push('Insert all fields');\n        return false;\n      }\n\n      if (type === \"PUT\") {\n        for(let i = 0; i < this.editNouns.length; i++) {\n          const noun = this.editNouns[i];\n          if (noun === \"\") {\n            this.editErrors.push('Insert all fields');\n            return false;\n          }\n\n        }\n\n        for(let i = 0; i < this.editAdjectives.length; i++) {\n          const adjective = this.editAdjectives[i];\n          if (adjective === \"\") {\n            this.editErrors.push('Insert all fields')\n            return false;\n          }\n        }\n\n        for(let i = 0; i < this.editAdverbs.length; i++) {\n          const adverb = this.editAdverbs[i];\n          if (adverb === \"\") {\n            this.editErrors.push('Insert all fields')\n            return false;\n          }\n        }\n\n        for(let i = 0; i < this.editPrepositions.length; i++) {\n          const preposition = this.editPrepositions[i];\n          if (preposition === \"\") {\n            this.editErrors.push('Insert all fields')\n           return false;\n          }\n        }\n\n        for(let i = 0; i < this.editVerbs.length; i++) {\n          const Verb = this.editVerbs[i];\n          if (Verb === \"\") {\n            this.editErrors.push('Insert all fields')\n            return false;\n          }\n        }\n      }\n      return true;\n    },\n    checkChars(type) {\n      const alphabet = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\".split('')\n\n      if (type === \"POST\") {\n        for(let i = 0; i < this.nouns.length; i++) {\n          const noun = this.nouns[i];\n          if (noun === undefined) return false;\n  \n          for(let j = 0; j < noun.length; j++) {\n            if (!alphabet.includes(noun[j])) {\n              this.errors.push('Only insert English characters without any space');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.adjectives.length; i++) {\n          const adjective = this.adjectives[i];\n          if (adjective === undefined) return false;\n  \n          for(let j = 0; j < adjective.length; j++) {\n            if (!alphabet.includes(adjective[j])) {\n              this.errors.push('Insert only English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.adverbs.length; i++) {\n          const adverb = this.adverbs[i];\n          if (adverb === undefined) return false;\n  \n          for(let j = 0; j < adverb.length; j++) {\n            if (!alphabet.includes(adverb[j])) {\n              this.errors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.prepositions.length; i++) {\n          const preposition = this.prepositions[i];\n          if (preposition === undefined) return false;\n  \n          for(let j = 0; j < preposition.length; j++) {\n            if (!alphabet.includes(preposition[j])) {\n              this.errors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.verbs.length; i++) {\n          const verb = this.verbs[i];\n          if (verb === undefined) return false;\n  \n          for(let j = 0; j < verb.length; j++) {\n            if (!alphabet.includes(verb[j])) {\n              this.errors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n      }\n\n      if (type === \"PUT\") {\n        for(let i = 0; i < this.editNouns.length; i++) {\n          const noun = this.editNouns[i];\n          if (noun === undefined) return false;\n  \n          for(let j = 0; j < noun.length; j++) {\n            if (!alphabet.includes(noun[j])) {\n              this.editErrors.push('Only insert English characters without any space');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.editAdjectives.length; i++) {\n          const adjective = this.editAdjectives[i];\n          if (adjective === undefined) return false;\n  \n          for(let j = 0; j < adjective.length; j++) {\n            if (!alphabet.includes(adjective[j])) {\n              this.editErrors.push('Insert only English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.editAdverbs.length; i++) {\n          const adverb = this.editAdverbs[i];\n          if (adverb === undefined) return false;\n  \n          for(let j = 0; j < adverb.length; j++) {\n            if (!alphabet.includes(adverb[j])) {\n              this.editErrors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.prepositions.length; i++) {\n          const preposition = this.prepositions[i];\n          if (preposition === undefined) return false;\n  \n          for(let j = 0; j < preposition.length; j++) {\n            if (!alphabet.includes(preposition[j])) {\n              this.editErrors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n  \n        for(let i = 0; i < this.verbs.length; i++) {\n          const verb = this.verbs[i];\n          if (verb === undefined) return false;\n  \n          for(let j = 0; j < verb.length; j++) {\n            if (!alphabet.includes(verb[j])) {\n              this.editErrors.push('Only insert English characters');\n              return false;\n            }\n          }\n        }\n      }\n      return true;\n    },\n    organizePoem(poem){\n      const poemArray = poem.text.split('.');\n\n      return `\n      <p data-v-25a0ba54 class=\"text\">\n        ${poemArray[0]}\n        </br>\n        </br>\n        ${poemArray[1]}\n        </br>\n        ${poemArray[2]}\n        </br>\n        ${poemArray[3]}\n      </p>\n      `;\n    },\n    renderEditForm(id, text) {\n      if (this.editPoemId === id) {\n        this.editPoemId = \"\";\n        this.editNouns = [];\n        this.editAdjectives = [];\n        this.editAdverbs = [];\n        this.editPrepositions = [];\n        this.editVerbs = [];\n      } else {\n        this.editPoemId = id;\n        this.updateEditWords(text);\n      }\n    },\n    updateEditWords(text){\n      const sentences = text.split(\".\");\n      const words = sentences.slice(1).join(\" \").split(\" \");\n\n      this.editNouns = [];\n      this.editAdjectives = [];\n      this.editAdverbs = [];\n      this.editPrepositions = [];\n      this.editVerbs = [];\n\n      this.editNouns.push(words[2], words[7], words[12]);\n      this.editAdjectives.push(words[1], words[6], words[11]);\n      this.editAdverbs.push(words[3], words[8], words[13]);\n      this.editPrepositions.push(words[0], words[5], words[10]);\n      this.editVerbs.push(words[4], words[9], words[14]);\n    }\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n@import \"reset.scss\";\n@import \"main.css\";\n</style>\n"]}]}